name: Deployment Resources - Receive and Build

on:
  workflow_dispatch:     # Allow manual trigger
  repository_dispatch:   # Allow external repo to trigger
    types: [dependency_updated]

jobs:
  who-triggered-me:
    runs-on: ubuntu-latest
    steps:
      - name: Display Trigger Info
        run: |
          echo "### üöÄ Deployment Resources Trigger Summary" >> $GITHUB_STEP_SUMMARY
          echo "Triggered by: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "Triggered by repo: ${{ github.event.client_payload.triggered_by }}" >> $GITHUB_STEP_SUMMARY
            echo '`repository_dispatch` payload:' >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            echo '${{ toJson(github.event.client_payload) }}' | jq . >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manual trigger" >> $GITHUB_STEP_SUMMARY
          fi
  
  build-data-source-service:
    needs: [who-triggered-me]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          repository: Capstone-Project-DACN/collection-tier
          token: ${{ secrets.COMMON_BUILD_REPO_TOKEN }}
          path: service/collection-tier
      
      - name: List files in the checkout directory for debugging
        run: |
          ls -alh service/collection-tier

      - name: Build and Push Docker Image
        run: |
          cd service/collection-tier/data-source-service
          IMAGE_NAME=github-action-data-source-service
          TAG=latest
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TAG} .
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TAG}
  
  build-collection-tier-service:
    needs: [who-triggered-me]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          repository: Capstone-Project-DACN/collection-tier
          token: ${{ secrets.COMMON_BUILD_REPO_TOKEN }}
          path: service/collection-tier
          
      - name: List files in the checkout directory for debugging
        run: |
          ls -alh service/collection-tier

      - name: Build and Push Docker Image
        run: |
          cd service/collection-tier/producer-service
          IMAGE_NAME=github-action-collection-tier-service
          TAG=latest
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TAG} .
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TAG}

  build-anomaly-detection:
    needs: [build-data-source-service, build-collection-tier-service]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          repository: Capstone-Project-DACN/message-tier
          token: ${{ secrets.COMMON_BUILD_REPO_TOKEN }}
          path: service/anomaly-detection
          
      - name: List files in the checkout directory for debugging
        run: |
          ls -alh service/anomaly-detection

      - name: Build and Push Docker Image
        run: |
          cd service/anomaly-detection
          IMAGE_NAME=github-action-anomaly-detection
          TAG=latest
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TAG} .
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TAG}

  build-analysis-tier:
    needs: [build-data-source-service, build-collection-tier-service]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          repository: Capstone-Project-DACN/analysis-tier
          token: ${{ secrets.COMMON_BUILD_REPO_TOKEN }}
          path: service/analysis-tier
          
      - name: List files in the checkout directory for debugging
        run: |
          ls -alh service/analysis-tier

      - name: Build and Push Docker Image
        run: |
          cd service/analysis-tier
          IMAGE_NAME=github-action-spark
          TAG=latest
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TAG} .
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TAG}

  build-data-access-tier:
    needs: [build-anomaly-detection, build-analysis-tier]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          repository: Capstone-Project-DACN/data-access-tier
          token: ${{ secrets.COMMON_BUILD_REPO_TOKEN }}
          path: service/data-access-tier
          
      - name: List files in the checkout directory for debugging
        run: |
          ls -alh service/data-access-tier

      - name: Build and Push Docker Image
        run: |
          cd service/data-access-tier
          IMAGE_NAME=github-action-data-access-tier
          TAG=latest
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TAG} .
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TAG}

  build-capstone-web:
    needs: [build-data-access-tier]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          repository: Capstone-Project-DACN/capstone-web
          token: ${{ secrets.COMMON_BUILD_REPO_TOKEN }}
          path: service/capstone-web
          
      - name: List files in the checkout directory for debugging
        run: |
          ls -alh service/capstone-web

      - name: Build and Push Docker Image
        run: |
          cd service/capstone-web
          IMAGE_NAME=github-action-capstone-web
          TAG=latest
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TAG} .
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TAG}

  deploy-to-ec2:
    needs: [who-triggered-me, build-data-source-service, build-collection-tier-service, build-anomaly-detection, build-analysis-tier, build-data-access-tier, build-capstone-web]
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Test EC2 Connection and List Files
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'echo "Successfully connected to EC2!" && pwd && ls -al'

      - name: Pull latest and run docker-compose
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            cd /path/to/deployment-resources  # <-- change this to where you cloned deployment-resources repo on EC2
            git checkout main
            git pull origin main

            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env.prod
            echo "EC2_HOST=${{ secrets.EC2_HOST }}" > .env.prod

            docker compose --env-file .env.prod -f docker-compose.prod.yml pull
            docker compose --env-file .env.prod -f docker-compose.prod.yml up -d
            
            echo "Checking service status..."
            docker compose --env-file .env.prod -f docker-compose.prod.yml ps

            echo "Checking container health (if defined)..."
            unhealthy_containers=$(docker ps -q | xargs -n1 docker inspect --format '{{ .Name }} {{ .State.Health.Status }}' | grep -E 'unhealthy' || true)

            if [ -n "$unhealthy_containers" ]; then
              echo "‚ùå Unhealthy containers detected:"
              echo "$unhealthy_containers"
              exit 1
            else
              echo "‚úÖ All containers are healthy."
            fi
          EOF

